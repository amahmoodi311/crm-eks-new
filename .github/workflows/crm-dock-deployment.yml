name: CRM Docker Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  database:
    runs-on: self-hosted
    steps:
      - name: Create Docker network
        run: |
          if docker network ls --format '{{ .Name }}' | grep -wq crmnetwork; then
            echo "crmnetwork exists"
          else
            docker network create crmnetwork
          fi

      - name: Setup MySQL
        run: |
          # Remove existing container if it exists
          if docker ps -a --format '{{.Names}}' | grep -wq crmdb; then
            echo "crmdb already exists, removing old container"
            docker rm -f crmdb
          fi

          # Run MySQL container
          docker run -d --name crmdb \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e MYSQL_DATABASE=crm \
            -p 3306:3306 \
            --network crmnetwork \
            mysql:8

  build:
    needs: database
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker login to Docker Hub
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build Backend Docker image
      - name: Build backend image
        run: |
          cd crm-api
          docker build --no-cache -t ${{ vars.DOCKER_USERNAME }}/crm-api:latest .

      # Build Frontend Docker image
      - name: Build frontend image
        run: |
          cd crm-web
          docker build --no-cache -t ${{ vars.DOCKER_USERNAME }}/crm-web:latest .

      # Push Backend Docker image
      - name: Push backend image
        run: docker push ${{ vars.DOCKER_USERNAME }}/crm-api:latest

      # Push Frontend Docker image
      - name: Push frontend image
        run: docker push ${{ vars.DOCKER_USERNAME }}/crm-web:latest

  backend:
    needs:
      - build
      - database
    runs-on: deploy
    steps:
      - name: Pull backend image
        run: docker pull ${{ vars.DOCKER_USERNAME }}/crm-api:latest

      - name: Run backend container
        run: |
          if docker ps -a --format '{{ .Names }}' | grep -wq crm-backend; then
            echo "Removing existing backend container..."
            docker container rm -f crm-backend
          fi
          docker container run -dt --name crm-backend -p 4000:4000 \
            --network crmnetwork \
            -e DATABASE_URL=mysql://root:${{ secrets.DB_PASSWORD }}@crmdb:3306/crm \
            -e PORT=4000 \
            -e MODE=local \
            ${{ vars.DOCKER_USERNAME }}/crm-api:latest

  frontend:
    needs:
      - build
      - backend
    runs-on: deploy
    steps:
      - name: Pull frontend image
        run: docker pull ${{ vars.DOCKER_USERNAME }}/crm-web:latest

      - name: Run frontend container
        run: |
          if docker ps -a --format '{{ .Names }}' | grep -wq crm-web; then
            echo "Removing existing frontend container..."
            docker container rm -f crm-web
          fi
          docker container run -dt --name crm-web --network crmnetwork -p 8081:80 \
            ${{ vars.DOCKER_USERNAME }}/crm-web:latest
